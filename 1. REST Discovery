# General

## 1. API Recon

- [ ] **Identify API endpoints**
  - **Vulnerability:** Misconfigured or exposed endpoints can lead to unintended data access or API misuse.
  - **Test:** Discover all endpoints by analyzing the API structure and documentation.
  - **Example:** Access `/api/books` and `/api/books/mystery` to see if they return data or if there are undocumented endpoints.

- [ ] **Analyze input data the API processes**
  - **Vulnerability:** Insufficient validation or handling of input parameters can lead to injection attacks or unexpected behavior.
  - **Test:** Examine both compulsory and optional parameters for each API endpoint.
  - **Example:** Test parameters like `bookId` in `/api/books/{bookId}` for invalid or unexpected values.

- [ ] **Determine the types of requests the API accepts**
  - **Vulnerability:** Lack of restrictions on allowed HTTP methods or media formats can lead to unauthorized actions.
  - **Test:** Verify the accepted HTTP methods and media types for each endpoint.
  - **Example:** Send requests using different methods (GET, POST, PUT) and content types (JSON, XML) to see how the API responds.

- [ ] **Check rate limits and authentication mechanisms**
  - **Vulnerability:** Inadequate rate limiting or authentication can lead to abuse or unauthorized access.
  - **Test:** Test API endpoints to see if they enforce rate limits and require proper authentication.
  - **Example:** Try sending a high volume of requests to check if the API rate limits responses or requires a valid authentication token.

- [ ] **Review API documentation**
  - **Vulnerability:** Outdated or incomplete documentation can mislead users and expose vulnerabilities.
  - **Test:** Compare the API documentation with actual behavior to ensure accuracy.
  - **Example:** Cross-reference endpoints and parameters listed in `/swagger/index.html` with actual API responses.

- [ ] **Use tools like Burp Scanner to crawl and audit APIs**
  - **Vulnerability:** Failure to audit can leave security flaws undetected.
  - **Test:** Run automated tools to discover vulnerabilities in API endpoints and interactions.
  - **Example:** Use Burp Scanner to identify issues such as open endpoints or misconfigurations.

- [ ] **Check for API documentation endpoints**
  - **Vulnerability:** Exposed documentation endpoints can reveal internal API details or security weaknesses.
  - **Test:** Locate documentation endpoints and assess their security.
  - **Example:** Access `/swagger/index.html` or `/openapi.json` and check for any sensitive information or misconfigurations.

## 2. API Endpoint Interaction

- [ ] **Interact with API endpoints using Burp Repeater and Burp Intruder**
  - **Vulnerability:** Unvalidated inputs or lack of proper handling can be exploited through repeated or automated requests.
  - **Test:** Use these tools to send repeated or modified requests to test the API's behavior.
  - **Example:** Send various payloads to an endpoint using Burp Repeater to see if the API handles unexpected inputs properly.

- [ ] **Test for error messages and unexpected behaviors**
  - **Vulnerability:** Detailed error messages can disclose information about the API's internals or potential vulnerabilities.
  - **Test:** Induce errors and observe the responses.
  - **Example:** Send malformed requests and check if the API returns detailed error messages.

- [ ] **Test different HTTP methods**
  - **Vulnerability:** Unsupported methods or improper handling can lead to unauthorized actions or resource access.
  - **Test:** Verify how the API responds to various HTTP methods.
  - **Example:** Send GET, POST, PATCH, DELETE requests to see if the API correctly handles or rejects unsupported methods.

- [ ] **Test for changes in behavior based on HTTP method**
  - **Vulnerability:** Variations in method handling might expose vulnerabilities or unintended behavior.
  - **Test:** Compare the API's behavior with different HTTP methods.
  - **Example:** Check if a DELETE request behaves differently from a GET request on the same endpoint.

- [ ] **Modify `Content-Type` header to test different content types**
  - **Vulnerability:** APIs may not correctly handle different content types, leading to potential attacks or data corruption.
  - **Test:** Send requests with varied `Content-Type` headers and observe the responses.
  - **Example:** Change `Content-Type` to `application/xml` and test if the API processes the data correctly.

- [ ] **Use the Content type converter to change between formats**
  - **Vulnerability:** Improper format handling can lead to data processing issues or vulnerabilities.
  - **Test:** Convert between different data formats and test the API’s response.
  - **Example:** Convert JSON payloads to XML and verify if the API can correctly handle and parse the data.

## 3. Hidden Endpoints Discovery

- [ ] **Use Burp Intruder to find hidden endpoints**
  - **Vulnerability:** Hidden endpoints may expose sensitive data or functionality.
  - **Test:** Utilize Burp Intruder to probe for endpoints not listed in the documentation.
  - **Example:** Try payloads such as `/admin`, `/hidden`, or `/debug` to uncover undisclosed endpoints.

- [ ] **Add a payload to common path positions**
  - **Vulnerability:** Hidden or undocumented endpoints might be accessible through common path variations.
  - **Test:** Modify endpoint paths with common variations to detect hidden resources.
  - **Example:** Change `/api/user/update` to `/api/user/delete` to see if an endpoint for user deletion exists.

- [ ] **Use wordlists of common API naming conventions**
  - **Vulnerability:** Common endpoint names might be exposed if not properly protected.
  - **Test:** Deploy wordlists to search for endpoints using common naming conventions.
  - **Example:** Use a wordlist with terms like `/admin`, `/config`, `/settings` to find additional endpoints.

## 4. Hidden Parameters Discovery

- [ ] **Use Burp Intruder to replace/add common parameters**
  - **Vulnerability:** Hidden parameters can lead to unauthorized access or unexpected behavior.
  - **Test:** Insert or modify common parameters in requests to test for hidden functionality.
  - **Example:** Add parameters like `admin=true` to see if it affects the API’s response.

- [ ] **Use Param miner BApp to guess parameter names**
  - **Vulnerability:** Hidden parameters might not be validated or sanitized properly.
  - **Test:** Employ tools like Param miner to discover additional parameters.
  - **Example:** Use Param miner to guess parameter names and analyze responses for unexpected results.

- [ ] **Use Burp’s content discovery tools to find hidden parameters**
  - **Vulnerability:** Uncovered parameters may expose vulnerabilities or sensitive functionality.
  - **Test:** Leverage content discovery tools to locate hidden parameters in API responses.
  - **Example:** Analyze response content to detect any additional parameters not initially visible.

## 5. Mass Assignment Vulnerability Testing

- [ ] **Check returned objects for hidden parameters**
  - **Vulnerability:** Mass assignment vulnerabilities allow users to modify fields they shouldn’t have access to.
  - **Test:** Review API responses for sensitive parameters that shouldn’t be user-modifiable.
  - **Example:** Observe if parameters like `isAdmin` or `userId` are exposed in API responses.

- [ ] **Modify hidden parameters in the request body**
  - **Vulnerability:** Unauthorized changes to hidden parameters can lead to privilege escalation or other issues.
  - **Test:** Alter hidden parameters in the request body and examine API responses.
  - **Example:** Change `isAdmin` to `true` and check if the API grants admin privileges.

- [ ] **Test invalid values for hidden parameters**
  - **Vulnerability:** Invalid or unexpected values can reveal how the API handles erroneous inputs.
  - **Test:** Send invalid values for hidden parameters and observe the API’s response.
  - **Example:** Test parameters like `age` with negative values or excessively high numbers.

## 6. Preventing Vulnerabilities in APIs

- [ ] **Secure API documentation if not publicly accessible**
  - **Vulnerability:** Exposed documentation can reveal API structure and potential vulnerabilities.
  - **Test:** Ensure API documentation is secured if not intended for public access.
  - **Example:** Verify that documentation endpoints are protected by authentication or IP restrictions.

- [ ] **Keep API documentation up to date**
  - **Vulnerability:** Outdated documentation may mislead users or expose vulnerabilities.
  - **Test:** Regularly review and update API documentation to reflect current API behavior.
  - **Example:** Compare the latest API changes with the documentation to ensure consistency.

- [ ] **Apply an allowlist of permitted HTTP methods**
  - **Vulnerability:** Unrestricted HTTP methods can be exploited to perform unauthorized actions.
  - **Test:** Implement and enforce an allowlist for HTTP methods on each endpoint.
  - **Example:** Verify that methods like PUT or DELETE are only allowed where explicitly intended.

- [ ] **Validate expected content types for all API requests and responses**
  - **Vulnerability:** Mismatched content types can lead to processing errors or security issues.
  - **Test:** Ensure that the API enforces proper content type validation.
  - **Example:** Send requests with incorrect `Content-Type` headers and check if the API rejects them.

- [ ] **Use generic error messages to prevent information disclosure**
  - **Vulnerability:** Detailed error messages can reveal sensitive information about the API.
  - **Test:** Ensure error messages do not expose implementation details.
  - **Example:** Verify that error responses are generic and do not include stack traces or internal details.

- [ ] **Ensure security measures are applied to all API versions**
  - **Vulnerability:** Security flaws in deprecated or unsupported API versions can
