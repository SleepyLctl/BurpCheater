# API Security Checklist

Checklist of the most important security countermeasures when designing, testing, and releasing your API.

---

## Authentication

- [ ] Don't use `Basic Auth`. Use standard authentication instead (e.g., [JWT](https://jwt.io/)).
- [ ] Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.
- [ ] Use `Max Retry` and jail features in Login.
- [ ] Use encryption on all sensitive data.

### JWT (JSON Web Token)

- [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.
- [ ] Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).
- [ ] Make token expiration (`TTL`, `RTTL`) as short as possible.
- [ ] Don't store sensitive data in the JWT payload, it can be decoded [easily](https://jwt.io/#debugger-io).
- [ ] Avoid storing too much data. JWT is usually shared in headers and they have a size limit.

## Access

- [ ] Limit requests (Throttling) to avoid DDoS / brute-force attacks.
- [ ] Use HTTPS on server side with TLS 1.2+ and secure ciphers to avoid MITM (Man in the Middle Attack).
- [ ] Use `HSTS` header with SSL to avoid SSL Strip attacks.
- [ ] Turn off directory listings.
- [ ] For private APIs, allow access only from safelisted IPs/hosts.

## Authorization

### OAuth

- [ ] Always validate `redirect_uri` server-side to allow only safelisted URLs.
- [ ] Always try to exchange for code and not tokens (don't allow `response_type=token`).
- [ ] Use `state` parameter with a random hash to prevent CSRF on the OAuth authorization process.
- [ ] Define the default scope, and validate scope parameters for each application.

## Input

- [ ] Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.
- [ ] Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g., `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.
- [ ] Validate `content-type` of posted data as you accept (e.g., `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).
- [ ] Validate user input to avoid common vulnerabilities (e.g., `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).
- [ ] Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.
- [ ] Use only server-side encryption.
- [ ] Use an API Gateway service to enable caching, Rate Limit policies (e.g., `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.

## Processing

- [ ] Check if all the endpoints are protected behind authentication to avoid broken authentication process.
- [ ] User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.
- [ ] Don't auto-increment IDs. Use `UUID` instead.
- [ ] If you are parsing XML data, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).
- [ ] If you are parsing XML, YAML or any other language with anchors and refs, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.
- [ ] Use a CDN for file uploads.
- [ ] If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.
- [ ] Do not forget to turn the DEBUG mode OFF.
- [ ] Use non-executable stacks when available.

## Output

- [ ] Send `X-Content-Type-Options: nosniff` header.
- [ ] Send `X-Frame-Options: deny` header.
- [ ] Send `Content-Security-Policy: default-src 'none'` header.
- [ ] Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.
- [ ] Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.
- [ ] Don't return sensitive data like `credentials`, `passwords`, or `security tokens`.
- [ ] Return the proper status code according to the operation completed. (e.g., `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).

## CI & CD

- [ ] Audit your design and implementation with unit/integration tests coverage.
- [ ] Use a code review process and disregard self-approval.
- [ ] Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.
- [ ] Continuously run security tests (static/dynamic analysis) on your code.
- [ ] Check your dependencies (both software and OS) for known vulnerabilities.
- [ ] Design a rollback solution for deployments.

## Monitoring

- [ ] Use centralized logins for all services and components.
- [ ] Use agents to monitor all traffic, errors, requests, and responses.
- [ ] Use alerts for SMS, Slack, Email, Telegram, Kibana, Cloudwatch, etc.
- [ ] Ensure that you aren't logging any sensitive data like credit cards, passwords, PINs, etc.
- [ ] Use an IDS and/or IPS system to monitor your API requests and instances.


-------------

# API Penetration Testing Checklist

## 1. API Recon
- [ ] Identify API endpoints (e.g., `/api/books`, `/api/books/mystery`).
- [ ] Analyze input data the API processes (compulsory and optional parameters).
- [ ] Determine the types of requests the API accepts (HTTP methods, media formats).
- [ ] Check rate limits and authentication mechanisms.
- [ ] Review API documentation (human-readable and machine-readable formats).
- [ ] Use tools like Burp Scanner to crawl and audit APIs.
- [ ] Check for API documentation endpoints (e.g., `/swagger/index.html`, `/openapi.json`).

## 2. API Endpoint Interaction
- [ ] Interact with API endpoints using Burp Repeater and Burp Intruder.
- [ ] Test for error messages and unexpected behaviors.
- [ ] Test different HTTP methods (GET, POST, PATCH, DELETE, OPTIONS).
- [ ] Test for changes in behavior based on HTTP method.
- [ ] Modify `Content-Type` header to test different content types (JSON, XML).
- [ ] Use the Content type converter to change between formats (XML, JSON).

## 3. Hidden Endpoints Discovery
- [ ] Use Burp Intruder to find hidden endpoints.
- [ ] Add a payload to common path positions to identify hidden resources (e.g., `/api/user/update` -> `/api/user/delete`).
- [ ] Use wordlists of common API naming conventions and industry terms to find hidden endpoints.

## 4. Hidden Parameters Discovery
- [ ] Use Burp Intruder to replace/add common parameters to requests.
- [ ] Use Param miner BApp to guess up to 65,536 parameter names per request.
- [ ] Use Burpâ€™s content discovery tools to find hidden parameters in APIs.

## 5. Mass Assignment Vulnerability Testing
- [ ] Check returned objects for hidden parameters (e.g., `isAdmin`, `id`).
- [ ] Modify hidden parameters in the request body (e.g., `isAdmin = true`).
- [ ] Test invalid values for hidden parameters and observe API responses.

## 6. Preventing Vulnerabilities in APIs
- [ ] Secure API documentation if the API is not publicly accessible.
- [ ] Keep API documentation up to date.
- [ ] Apply an allowlist of permitted HTTP methods.
- [ ] Validate expected content types for all API requests and responses.
- [ ] Use generic error messages to prevent information disclosure.
- [ ] Ensure security measures are applied to all API versions, not just the production version.
- [ ] Implement allowlists and blocklists to control which properties can be updated by users.

## Tools and Techniques
- Burp Suite (Scanner, Repeater, Intruder, Param miner, Content type converter)
- Postman, SoapUI for interacting and testing APIs

